{"version":3,"file":"386.f5208f8b7e54eb0a6bba.js","mappings":"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","sources":["webpack:///./node_modules/@react-leaflet/core/lib/context.js","webpack:///./node_modules/@react-leaflet/core/lib/layer.js","webpack:///./node_modules/@react-leaflet/core/lib/path.js","webpack:///./node_modules/@react-leaflet/core/lib/pane.js","webpack:///./node_modules/@react-leaflet/core/lib/events.js","webpack:///./node_modules/react-leaflet/lib/GeoJSON.js","webpack:///./node_modules/@react-leaflet/core/lib/component.js","webpack:///./node_modules/@react-leaflet/core/lib/generic.js","webpack:///./node_modules/@react-leaflet/core/lib/element.js","webpack:///./node_modules/react-leaflet/lib/MapContainer.js","webpack:///./node_modules/react-leaflet/lib/hooks.js"],"sourcesContent":["import { createContext, useContext } from 'react';\nexport const CONTEXT_VERSION = 1;\nexport function createLeafletContext(map) {\n    return Object.freeze({\n        __version: CONTEXT_VERSION,\n        map\n    });\n}\nexport function extendContext(source, extra) {\n    return Object.freeze({\n        ...source,\n        ...extra\n    });\n}\nexport const LeafletContext = createContext(null);\nexport const LeafletProvider = LeafletContext.Provider;\nexport function useLeafletContext() {\n    const context = useContext(LeafletContext);\n    if (context == null) {\n        throw new Error('No context provided: useLeafletContext() can only be used in a descendant of <MapContainer>');\n    }\n    return context;\n}\n","import { useEffect } from 'react';\nimport { useAttribution } from './attribution.js';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { withPane } from './pane.js';\nexport function useLayerLifecycle(element, context) {\n    useEffect(function addLayer() {\n        const container = context.layerContainer ?? context.map;\n        container.addLayer(element.instance);\n        return function removeLayer() {\n            context.layerContainer?.removeLayer(element.instance);\n            context.map.removeLayer(element.instance);\n        };\n    }, [\n        context,\n        element\n    ]);\n}\nexport function createLayerHook(useElement) {\n    return function useLayer(props) {\n        const context = useLeafletContext();\n        const elementRef = useElement(withPane(props, context), context);\n        useAttribution(context.map, props.attribution);\n        useEventHandlers(elementRef.current, props.eventHandlers);\n        useLayerLifecycle(elementRef.current, context);\n        return elementRef;\n    };\n}\n","import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { useLayerLifecycle } from './layer.js';\nimport { withPane } from './pane.js';\nexport function usePathOptions(element, props) {\n    const optionsRef = useRef();\n    useEffect(function updatePathOptions() {\n        if (props.pathOptions !== optionsRef.current) {\n            const options = props.pathOptions ?? {};\n            element.instance.setStyle(options);\n            optionsRef.current = options;\n        }\n    }, [\n        element,\n        props\n    ]);\n}\nexport function createPathHook(useElement) {\n    return function usePath(props) {\n        const context = useLeafletContext();\n        const elementRef = useElement(withPane(props, context), context);\n        useEventHandlers(elementRef.current, props.eventHandlers);\n        useLayerLifecycle(elementRef.current, context);\n        usePathOptions(elementRef.current, props);\n        return elementRef;\n    };\n}\n","export function withPane(props, context) {\n    const pane = props.pane ?? context.pane;\n    return pane ? {\n        ...props,\n        pane\n    } : props;\n}\n","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n    const eventHandlersRef = useRef();\n    useEffect(function addEventHandlers() {\n        if (eventHandlers != null) {\n            element.instance.on(eventHandlers);\n        }\n        eventHandlersRef.current = eventHandlers;\n        return function removeEventHandlers() {\n            if (eventHandlersRef.current != null) {\n                element.instance.off(eventHandlersRef.current);\n            }\n            eventHandlersRef.current = null;\n        };\n    }, [\n        element,\n        eventHandlers\n    ]);\n}\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nexport const GeoJSON = createPathComponent(function createGeoJSON({ data , ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options);\n    return createElementObject(geoJSON, extendContext(ctx, {\n        overlayContainer: geoJSON\n    }));\n}, function updateGeoJSON(layer, props, prevProps) {\n    if (props.style !== prevProps.style) {\n        if (props.style == null) {\n            layer.resetStyle();\n        } else {\n            layer.setStyle(props.style);\n        }\n    }\n});\n","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context.js';\nexport function createContainerComponent(useElement) {\n    function ContainerComponent(props, forwardedRef) {\n        const { instance , context  } = useElement(props).current;\n        useImperativeHandle(forwardedRef, ()=>instance);\n        return props.children == null ? null : /*#__PURE__*/ React.createElement(LeafletProvider, {\n            value: context\n        }, props.children);\n    }\n    return /*#__PURE__*/ forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n    function OverlayComponent(props, forwardedRef) {\n        const [isOpen, setOpen] = useState(false);\n        const { instance  } = useElement(props, setOpen).current;\n        useImperativeHandle(forwardedRef, ()=>instance);\n        useEffect(function updateOverlay() {\n            if (isOpen) {\n                instance.update();\n            }\n        }, [\n            instance,\n            isOpen,\n            props.children\n        ]);\n        // @ts-ignore _contentNode missing in type definition\n        const contentNode = instance._contentNode;\n        return contentNode ? /*#__PURE__*/ createPortal(props.children, contentNode) : null;\n    }\n    return /*#__PURE__*/ forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n    function LeafComponent(props, forwardedRef) {\n        const { instance  } = useElement(props).current;\n        useImperativeHandle(forwardedRef, ()=>instance);\n        return null;\n    }\n    return /*#__PURE__*/ forwardRef(LeafComponent);\n}\n","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component.js';\nimport { createControlHook } from './control.js';\nimport { createElementHook, createElementObject } from './element.js';\nimport { createLayerHook } from './layer.js';\nimport { createDivOverlayHook } from './div-overlay.js';\nimport { createPathHook } from './path.js';\nexport function createControlComponent(createInstance) {\n    function createElement(props, context) {\n        return createElementObject(createInstance(props), context);\n    }\n    const useElement = createElementHook(createElement);\n    const useControl = createControlHook(useElement);\n    return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n    const useElement = createElementHook(createElement, updateElement);\n    const useLayer = createLayerHook(useElement);\n    return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n    const useElement = createElementHook(createElement);\n    const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n    return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n    const useElement = createElementHook(createElement, updateElement);\n    const usePath = createPathHook(useElement);\n    return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n    const useElement = createElementHook(createElement, updateElement);\n    const useLayer = createLayerHook(useElement);\n    return createLeafComponent(useLayer);\n}\n","import { useEffect, useRef } from 'react';\nexport function createElementObject(instance, context, container) {\n    return Object.freeze({\n        instance,\n        context,\n        container\n    });\n}\nexport function createElementHook(createElement, updateElement) {\n    if (updateElement == null) {\n        return function useImmutableLeafletElement(props, context) {\n            const elementRef = useRef();\n            if (!elementRef.current) elementRef.current = createElement(props, context);\n            return elementRef;\n        };\n    }\n    return function useMutableLeafletElement(props, context) {\n        const elementRef = useRef();\n        if (!elementRef.current) elementRef.current = createElement(props, context);\n        const propsRef = useRef(props);\n        const { instance  } = elementRef.current;\n        useEffect(function updateElementProps() {\n            if (propsRef.current !== props) {\n                updateElement(instance, props, propsRef.current);\n                propsRef.current = props;\n            }\n        }, [\n            instance,\n            props,\n            context\n        ]);\n        return elementRef;\n    };\n}\n","function _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nimport { LeafletProvider, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nfunction MapContainerComponent({ bounds , boundsOptions , center , children , className , id , placeholder , style , whenReady , zoom , ...options }, forwardedRef) {\n    const [props] = useState({\n        className,\n        id,\n        style\n    });\n    const [context, setContext] = useState(null);\n    useImperativeHandle(forwardedRef, ()=>context?.map ?? null, [\n        context\n    ]);\n    const mapRef = useCallback((node)=>{\n        if (node !== null && context === null) {\n            const map = new LeafletMap(node, options);\n            if (center != null && zoom != null) {\n                map.setView(center, zoom);\n            } else if (bounds != null) {\n                map.fitBounds(bounds, boundsOptions);\n            }\n            if (whenReady != null) {\n                map.whenReady(whenReady);\n            }\n            setContext(createLeafletContext(map));\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    useEffect(()=>{\n        return ()=>{\n            context?.map.remove();\n        };\n    }, [\n        context\n    ]);\n    const contents = context ? /*#__PURE__*/ React.createElement(LeafletProvider, {\n        value: context\n    }, children) : placeholder ?? null;\n    return /*#__PURE__*/ React.createElement(\"div\", _extends({}, props, {\n        ref: mapRef\n    }), contents);\n}\nexport const MapContainer = /*#__PURE__*/ forwardRef(MapContainerComponent);\n","import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n    return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n    const map = useMap();\n    useEffect(function addMapEventHandler() {\n        // @ts-ignore event type\n        map.on(type, handler);\n        return function removeMapEventHandler() {\n            // @ts-ignore event type\n            map.off(type, handler);\n        };\n    }, [\n        map,\n        type,\n        handler\n    ]);\n    return map;\n}\nexport function useMapEvents(handlers) {\n    const map = useMap();\n    useEffect(function addMapEventHandlers() {\n        map.on(handlers);\n        return function removeMapEventHandlers() {\n            map.off(handlers);\n        };\n    }, [\n        map,\n        handlers\n    ]);\n    return map;\n}\n"],"names":["CONTEXT_VERSION","createLeafletContext","map","Object","freeze","__version","extendContext","source","extra","LeafletContext","createContext","LeafletProvider","Provider","useLeafletContext","context","useContext","Error","useLayerLifecycle","element","useEffect","layerContainer","addLayer","instance","removeLayer","createPathHook","useElement","props","elementRef","pane","eventHandlers","eventHandlersRef","useRef","on","current","off","optionsRef","pathOptions","options","setStyle","usePathOptions","GeoJSON","ContainerComponent","forwardedRef","useImperativeHandle","children","value","forwardRef","createElement","updateElement","propsRef","data","ctx","geoJSON","overlayContainer","container","layer","prevProps","style","resetStyle","_extends","assign","target","i","arguments","length","key","prototype","hasOwnProperty","call","apply","this","MapContainerComponent","bounds","boundsOptions","center","className","id","placeholder","whenReady","zoom","useState","setContext","mapRef","useCallback","node","setView","fitBounds","remove","contents","ref","MapContainer","useMap"],"sourceRoot":""}