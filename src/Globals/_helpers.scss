/// Responsive management for mobile first
/// @access public
/// @param {integer} $breakpoint - Breakpoint value
/// @requires $breakpoint
@mixin respond-at($breakpoint: $global-breakpoint) {
  @media only screen and (min-width: #{$breakpoint}px) {
    @content;
  }
}

/// Responsive management for desktop first (max-width)
/// @access public
/// @param {integer} $breakpoint - Breakpoint value
/// @requires $breakpoint
@mixin respond-max($breakpoint: $global-breakpoint) {
  @media only screen and (max-width: #{$breakpoint}px) {
    @content;
  }
}

/// Set a placeholder to the element.
/// Usage example: @include placeholder { color: pink; }
@mixin scroll($width, $height, $area-bg, $thumb-bg, $border-radius, $border-width: 0, $border-color: $area-bg) {
  /* Rules only for Firefox */
  scrollbar-width: $width;
  scrollbar-color: $thumb-bg $area-bg;

  &::-webkit-scrollbar {
    /* width of the entire scrollbar */
    width: $width;
    height: $height;
  }

  &::-webkit-scrollbar-track {
    /* color of the tracking area */
    background: $area-bg;
  }

  &::-webkit-scrollbar-thumb {
    /* color of the scroll thumb */
    background-color: $thumb-bg;
    /* roundness of the scroll thumb */
    border-radius: $border-radius;
    /* creates padding around scroll thumb */
    border: $border-width solid $border-color;
  }

  /* Safari */
  @supports (-webkit-appearance: none) {
    & {
      scrollbar-width: $width;
      scrollbar-height: $height;
    }
  }
}

/// Function to convert px to rem
/// Pass $size in px (without 'px') to get the rules in rem
/// @param {Number} $size - Size in px
@function rem($size) {
  $rem-size: $size " ";

  @if $size !=null and $size !=auto and $size !=unset and $size !=inherit and $size !=initial and $size !=revert and $size !=none {
    $rem-size: #{calc($size / 16)}rem;
  }

  @return #{$rem-size};
}